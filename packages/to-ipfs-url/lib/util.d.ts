import { IToCIDInputValue } from '@lazy-ipfs/to-cid';
export declare function _getCidHashFromInput(cid: IToCIDInputValue): string | (Omit<import("ts-type").ITSPickExtra<import("cids"), "version" | "multihash" | "codec" | "code", "multibaseName">, "codec" | "code"> & import("ts-type").ITSRequiredPick<import("ts-type").ITSPickExtra<import("cids"), "version" | "multihash" | "codec" | "code", "multibaseName">, "codec"> & import("ts-type").ITSPartialPick<import("ts-type").ITSPickExtra<import("cids"), "version" | "multihash" | "codec" | "code", "multibaseName">, "code">) | (Omit<import("ts-type").ITSPickExtra<import("cids"), "version" | "multihash" | "codec" | "code", "multibaseName">, "codec" | "code"> & import("ts-type").ITSRequiredPick<import("ts-type").ITSPickExtra<import("cids"), "version" | "multihash" | "codec" | "code", "multibaseName">, "code"> & import("ts-type").ITSPartialPick<import("ts-type").ITSPickExtra<import("cids"), "version" | "multihash" | "codec" | "code", "multibaseName">, "codec">) | import("@lazy-ipfs/detect-cid-lib").IRawMultiformatsCID | Uint8Array | import("@lazy-ipfs/parse-ipfs-path/lib/types").IParsePathResult<string, string, import("@lazy-ipfs/parse-ipfs-path/lib/types").IParsePathResultNsInput>;
export declare function _getPathFromInput(cid: IToCIDInputValue): string;
